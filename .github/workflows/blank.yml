name: Manual Approval with Auto Tagging

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Git
      run: |
        git config --global user.name "${{ github.actor }}"
        git config --global user.email "devmodou@gmail.com"

    - name: Get the latest tag
      id: get_latest_tag
      run: |
        latest_tag=$(git describe --abbrev=0 --tags 2>/dev/null || echo "0.0.0")
        echo "Latest tag: $latest_tag"
        echo "::set-output name=latest_tag::$latest_tag" >> $GITHUB_ENV

    - name: Determine next version
      id: bump_version
      run: |
        # Split the version number into parts
        IFS='.' read -r major minor patch build <<< "${{ needs.build.outputs.latest_tag }}"

        # Increment the build number
        build=$((build + 1))

        # Set the new version as an output
        new_version="$major.$minor.$patch.$build"
        echo "New version: $new_version"
        echo "::set-output name=new_version::$new_version" >> $GITHUB_ENV

    - name: Set deploy_approval input
      run: echo "deploy_approval=${{ github.event.inputs.deploy_approval }}" >> $GITHUB_ENV

  staging-approval:
    runs-on: ubuntu-latest
    environment: 'Staging'
    needs:
      - build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Ask for staging deployment approval
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          deploy_approval=${{ env.deploy_approval }}

          if [[ "$deploy_approval" == "YES" ]]; then
            echo "Staging deployment is approved."
            echo "Proceeding with the deployment..."
            
            # Update the deploy_approval status to "YES" in the pull request
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -d '{
                "event": "APPROVE"
              }' \
              "https://api.github.com/repos/sencloudpl/workflow/pulls/$PULL_REQUEST_NUMBER/reviews"

          else
            echo "Staging deployment is not approved."
            echo "Waiting for approval or timeout..."
            # Sleep for 15 seconds
            sleep 15

            # Check if the approval is still not received
            if [[ "$deploy_approval" != "YES" ]]; then
              echo "Approval not received within the specified time."
              echo "Skipping the staging deployment..."
              exit 0
            fi
          fi
            

      - name: Create Pull Request
        if: ${{ needs.build.outputs.latest_tag != '0.0.0' && env.deploy_approval == 'YES' }}
        run: |
          # Récupérer le nom de la branche actuelle
          CURRENT_BRANCH=$(git branch --show-current)
            
          # Créer la Pull Request en utilisant l'API GitHub
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d '{
              "title": "Ma nouvelle Pull Request",
              "head": "staging",
              "base": "main",
              "body": "Description de la Pull Request"
            }' \
            "https://api.github.com/repos/sencloudpl/workflow/pulls"



      # - name: Fetch the remote changes
      #   run: git fetch origin

      # - name: Merge main into staging
      #   if: ${{ needs.build.outputs.latest_tag != '0.0.0' && env.deploy_approval == 'YES' }}
      #   run: |
      #     # Set up Git for the runner environment (if not already set)
      #     git config user.name "${{ github.actor }}"
      #     git config user.email "devmodou@gmail.com"

      #     # Fetch the remote changes
      #     git fetch origin

      #     # Merge main into staging
      #     git checkout staging
      #     git merge origin/main --no-edit --allow-unrelated-histories
      #     git push origin staging

      #     # Get the new version from the build job output
      #     version="${{ needs.build.outputs.new_version }}"
      #     echo "New version: $version"

      #     # Tag the merge commit with the new version
      #     git tag "$version" "${{ github.sha }}"
      #     git push origin --tags


      # - name: Create Pull Request
      #   if: ${{ needs.build.outputs.latest_tag != '0.0.0' && env.deploy_approval == 'YES' }}
      #   run: |
      #     # Récupérer le nom de la branche actuelle
      #     CURRENT_BRANCH=$(git branch --show-current)
          
      #     # Créer la Pull Request en utilisant l'API GitHub
      #     curl -X POST \
      #       -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
      #       -d '{
      #         "title": "Ma nouvelle Pull Request",
      #         "head": "staging",
      #         "base": "main",
      #         "body": "Description de la Pull Request"
      #       }' \
      #       "https://api.github.com/repos/sencloudpl/workflow/pulls"
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}