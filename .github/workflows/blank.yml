name: Manual Approval with Auto Tagging

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_approval:
        description: 'Approve deployment to staging environment'
        required: true
        default: 'NO'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Git
      run: |
        git config --global user.name "Mamadou Sadio"
        git config --global user.email "devmodou@gmail.com"

    - name: Get the latest tag
      id: get_latest_tag
      run: |
        latest_tag=$(git describe --abbrev=0 --tags 2>/dev/null || echo "0.0.0")
        echo "Latest tag: $latest_tag"
        echo "::set-output name=latest_tag::$latest_tag" >> $GITHUB_ENV

    - name: Determine next version
      id: bump_version
      run: |
        # Split the version number into parts
        IFS='.' read -r major minor patch build <<< "${{ needs.build.outputs.latest_tag }}"

        # Increment the build number
        build=$((build + 1))

        # Set the new version as an output
        new_version="$major.$minor.$patch.$build"
        echo "New version: $new_version"
        echo "::set-output name=new_version::$new_version" >> $GITHUB_ENV

    - name: Set deploy_approval input
      run: echo "deploy_approval=${{ github.event.inputs.deploy_approval }}" >> $GITHUB_ENV

  staging-approval:
    runs-on: ubuntu-latest
    environment: 'Staging'
    needs:
      - build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Ask for staging deployment approval
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          deploy_approval=${{ env.deploy_approval }}

          if [[ "$deploy_approval" == "YES" ]]; then
            echo "Staging deployment is approved."
            echo "Proceeding with the deployment..."
          else
            echo "Staging deployment is not approved."
            echo "Skipping the staging deployment..."
            exit 0
          fi

      - name: Create staging branch (if not exists)
        run: git show-ref --verify --quiet refs/heads/staging || git branch staging

      - name: Fetch the remote changes
        run: git fetch origin

      - name: Merge main into staging 
        if: ${{ needs.build.outputs.latest_tag }} != '0.0.0' && env.deploy_approval == 'YES'
        run: |
          echo Start merge,
          git checkout staging
          git merge origin/staging --no-edit
          git push origin staging

          # Get the new version from the build job output
          version="${{ needs.build.outputs.new_version }}"
          echo "New version: $version"

          # Tag the merge commit with the new version v
          git tag "$version" "${{ github.sha }}"
          git push origin --tags
